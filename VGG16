{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VGG16","provenance":[],"collapsed_sections":["_iU7M31O1C_k"],"authorship_tag":"ABX9TyPuVLqWpFTscReFS/6vq+tU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"ERMrlDGgo9Tf"},"source":["#VGG16 - Convolutional Network for Classification and Detection\n","\n","**VGG16** là convolutional neural network model.\n","- The model achieves 92.7% top-5 test accuracy in ImageNet( là một dataset gồm hơn 14 triệu ảnh đươc dán nhãn 1000 classes),\n","- VGG16 được train trong nhiều tuần và dùng nhiề NVIDIA Titan Black GPU để train.\n","\n","**DataSet**\n","- ImageNet là một tập dữ liệu của hơn 15 triệu hình ảnh có độ phân giải cao được dán nhãn thuộc khoảng 22000 categories.\n","- Các hình ảnh được thu thập từ web và được gắn nhãn bởi những người dùng công cụ tìm kiếm Amazon của Mechanical Turk.\n","\n","**The Architecture**\n","\n","![VGG16 Architecture](https://neurohive.io/wp-content/uploads/2018/11/vgg16-neural-network.jpg)\n","\n","**Configurations**\n","\n","![ConvNet Configuration](https://neurohive.io/wp-content/uploads/2018/11/Capture-564x570.jpg)\n","\n","\n","\n","**Use-Cases and Implementation**\n","\n","Có 2 nhược điểm lớn của VGGNet:\n","- Khi train tốn rất nhiều thời gian.\n","- Kiến trúc có một lượng khá lớn weights.\n","\n","Bởi vì độ sâu và số lượng FC nodes, VGG16 hơn 533MB. Thường không phù hợp khi áp dụng vào thực tế nhưng phù hợp cho việc học vì nó dễ implement."]},{"cell_type":"markdown","metadata":{"id":"_iU7M31O1C_k"},"source":["##Implementation with tensorflow"]},{"cell_type":"code","metadata":{"id":"3dAgSXkY1BeA"},"source":["import inspect\n","import os\n","\n","import numpy as np\n","import tensorflow as tf\n","import time\n","\n","VGG_MEAN = [103.939, 116.779, 123.68]\n","\n","\n","class Vgg16:\n","    def __init__(self, vgg16_npy_path=None):\n","        if vgg16_npy_path is None:\n","            path = inspect.getfile(Vgg16)\n","            path = os.path.abspath(os.path.join(path, os.pardir))\n","            path = os.path.join(path, \"vgg16.npy\")\n","            vgg16_npy_path = path\n","            print(path)\n","\n","        self.data_dict = np.load(vgg16_npy_path, encoding='latin1').item()\n","        print(\"npy file loaded\")\n","\n","    def build(self, rgb):\n","        \"\"\"\n","        load variable from npy to build the VGG\n","        :param rgb: rgb image [batch, height, width, 3] values scaled [0, 1]\n","        \"\"\"\n","\n","        start_time = time.time()\n","        print(\"build model started\")\n","        rgb_scaled = rgb * 255.0\n","\n","        # Convert RGB to BGR\n","        red, green, blue = tf.split(axis=3, num_or_size_splits=3, value=rgb_scaled)\n","        assert red.get_shape().as_list()[1:] == [224, 224, 1]\n","        assert green.get_shape().as_list()[1:] == [224, 224, 1]\n","        assert blue.get_shape().as_list()[1:] == [224, 224, 1]\n","        bgr = tf.concat(axis=3, values=[\n","            blue - VGG_MEAN[0],\n","            green - VGG_MEAN[1],\n","            red - VGG_MEAN[2],\n","        ])\n","        assert bgr.get_shape().as_list()[1:] == [224, 224, 3]\n","\n","        self.conv1_1 = self.conv_layer(bgr, \"conv1_1\")\n","        self.conv1_2 = self.conv_layer(self.conv1_1, \"conv1_2\")\n","        self.pool1 = self.max_pool(self.conv1_2, 'pool1')\n","\n","        self.conv2_1 = self.conv_layer(self.pool1, \"conv2_1\")\n","        self.conv2_2 = self.conv_layer(self.conv2_1, \"conv2_2\")\n","        self.pool2 = self.max_pool(self.conv2_2, 'pool2')\n","\n","        self.conv3_1 = self.conv_layer(self.pool2, \"conv3_1\")\n","        self.conv3_2 = self.conv_layer(self.conv3_1, \"conv3_2\")\n","        self.conv3_3 = self.conv_layer(self.conv3_2, \"conv3_3\")\n","        self.pool3 = self.max_pool(self.conv3_3, 'pool3')\n","\n","        self.conv4_1 = self.conv_layer(self.pool3, \"conv4_1\")\n","        self.conv4_2 = self.conv_layer(self.conv4_1, \"conv4_2\")\n","        self.conv4_3 = self.conv_layer(self.conv4_2, \"conv4_3\")\n","        self.pool4 = self.max_pool(self.conv4_3, 'pool4')\n","\n","        self.conv5_1 = self.conv_layer(self.pool4, \"conv5_1\")\n","        self.conv5_2 = self.conv_layer(self.conv5_1, \"conv5_2\")\n","        self.conv5_3 = self.conv_layer(self.conv5_2, \"conv5_3\")\n","        self.pool5 = self.max_pool(self.conv5_3, 'pool5')\n","\n","        self.fc6 = self.fc_layer(self.pool5, \"fc6\")\n","        assert self.fc6.get_shape().as_list()[1:] == [4096]\n","        self.relu6 = tf.nn.relu(self.fc6)\n","\n","        self.fc7 = self.fc_layer(self.relu6, \"fc7\")\n","        self.relu7 = tf.nn.relu(self.fc7)\n","\n","        self.fc8 = self.fc_layer(self.relu7, \"fc8\")\n","\n","        self.prob = tf.nn.softmax(self.fc8, name=\"prob\")\n","\n","        self.data_dict = None\n","        print((\"build model finished: %ds\" % (time.time() - start_time)))\n","\n","    def avg_pool(self, bottom, name):\n","        return tf.nn.avg_pool(bottom, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name=name)\n","\n","    def max_pool(self, bottom, name):\n","        return tf.nn.max_pool(bottom, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME', name=name)\n","\n","    def conv_layer(self, bottom, name):\n","        with tf.variable_scope(name):\n","            filt = self.get_conv_filter(name)\n","\n","            conv = tf.nn.conv2d(bottom, filt, [1, 1, 1, 1], padding='SAME')\n","\n","            conv_biases = self.get_bias(name)\n","            bias = tf.nn.bias_add(conv, conv_biases)\n","\n","            relu = tf.nn.relu(bias)\n","            return relu\n","\n","    def fc_layer(self, bottom, name):\n","        with tf.variable_scope(name):\n","            shape = bottom.get_shape().as_list()\n","            dim = 1\n","            for d in shape[1:]:\n","                dim *= d\n","            x = tf.reshape(bottom, [-1, dim])\n","\n","            weights = self.get_fc_weight(name)\n","            biases = self.get_bias(name)\n","\n","            # Fully connected layer. Note that the '+' operation automatically\n","            # broadcasts the biases.\n","            fc = tf.nn.bias_add(tf.matmul(x, weights), biases)\n","\n","            return fc\n","\n","    def get_conv_filter(self, name):\n","        return tf.constant(self.data_dict[name][0], name=\"filter\")\n","\n","    def get_bias(self, name):\n","        return tf.constant(self.data_dict[name][1], name=\"biases\")\n","\n","    def get_fc_weight(self, name):\n","        return tf.constant(self.data_dict[name][0], name=\"weights\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pUwbSOqk2Fpw"},"source":["##Implementation with Keras\n"]},{"cell_type":"code","metadata":{"id":"OXuPJ2Db2Osk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621979227342,"user_tz":-420,"elapsed":1374,"user":{"displayName":"Dũng Nguyễn","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gii5U-zs-8ujhQaCpvDo03iequwy5RSKEnhRnwQGQ=s64","userId":"11702303910424597473"}},"outputId":"7a5f9479-71d7-4949-a985-5ec627a106b0"},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, Flatten\n","from keras.layers import Conv2D, MaxPooling2D\n","from keras.utils import np_utils\n","from keras.datasets import mnist\n","\n","model = Sequential()\n","\n","model.add(Conv2D(64, (3, 3),padding='same', activation='relu', input_shape=(224,224,3)))\n","model.add(Conv2D(64, (3, 3),padding='same', activation='relu'))\n","model.add(MaxPooling2D(pool_size=(2,2)))\n","\n","model.add(Conv2D(128, (3, 3),padding='same', activation='relu'))\n","model.add(Conv2D(128, (3, 3),padding='same', activation='relu'))\n","model.add(MaxPooling2D(pool_size=(2,2)))\n","\n","model.add(Conv2D(256, (3, 3),padding='same', activation='relu'))\n","model.add(Conv2D(256, (3, 3),padding='same', activation='relu'))\n","model.add(Conv2D(256, (3, 3),padding='same', activation='relu'))\n","model.add(Conv2D(256, (3, 3),padding='same', activation='relu'))\n","model.add(MaxPooling2D(pool_size=(2,2)))\n","\n","model.add(Conv2D(521, (3, 3),padding='same', activation='relu'))\n","model.add(Conv2D(521, (3, 3),padding='same', activation='relu'))\n","model.add(Conv2D(521, (3, 3),padding='same', activation='relu'))\n","model.add(Conv2D(521, (3, 3),padding='same', activation='relu'))\n","model.add(MaxPooling2D(pool_size=(2,2)))\n","\n","model.add(Conv2D(521, (3, 3),padding='same', activation='relu'))\n","model.add(Conv2D(521, (3, 3),padding='same', activation='relu'))\n","model.add(Conv2D(521, (3, 3),padding='same', activation='relu'))\n","model.add(Conv2D(521, (3, 3),padding='same', activation='relu'))\n","model.add(MaxPooling2D(pool_size=(2,2)))\n","\n","model.add(Flatten())\n","\n","model.add(Dense(4096, activation='relu'))\n","model.add(Dense(4096, activation='relu'))\n","model.add(Dense(1000, activation='softmax'))\n","\n","model.compile(loss='categorical_crossentropy',\n","              optimizer='sgd',\n","              metrics=['accuracy'])\n","\n","model.summary()\n"],"execution_count":17,"outputs":[{"output_type":"stream","text":["Model: \"sequential_4\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_50 (Conv2D)           (None, 224, 224, 64)      1792      \n","_________________________________________________________________\n","conv2d_51 (Conv2D)           (None, 224, 224, 64)      36928     \n","_________________________________________________________________\n","max_pooling2d_16 (MaxPooling (None, 112, 112, 64)      0         \n","_________________________________________________________________\n","conv2d_52 (Conv2D)           (None, 112, 112, 128)     73856     \n","_________________________________________________________________\n","conv2d_53 (Conv2D)           (None, 112, 112, 128)     147584    \n","_________________________________________________________________\n","max_pooling2d_17 (MaxPooling (None, 56, 56, 128)       0         \n","_________________________________________________________________\n","conv2d_54 (Conv2D)           (None, 56, 56, 256)       295168    \n","_________________________________________________________________\n","conv2d_55 (Conv2D)           (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","conv2d_56 (Conv2D)           (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","conv2d_57 (Conv2D)           (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","max_pooling2d_18 (MaxPooling (None, 28, 28, 256)       0         \n","_________________________________________________________________\n","conv2d_58 (Conv2D)           (None, 28, 28, 521)       1200905   \n","_________________________________________________________________\n","conv2d_59 (Conv2D)           (None, 28, 28, 521)       2443490   \n","_________________________________________________________________\n","conv2d_60 (Conv2D)           (None, 28, 28, 521)       2443490   \n","_________________________________________________________________\n","conv2d_61 (Conv2D)           (None, 28, 28, 521)       2443490   \n","_________________________________________________________________\n","max_pooling2d_19 (MaxPooling (None, 14, 14, 521)       0         \n","_________________________________________________________________\n","conv2d_62 (Conv2D)           (None, 14, 14, 521)       2443490   \n","_________________________________________________________________\n","conv2d_63 (Conv2D)           (None, 14, 14, 521)       2443490   \n","_________________________________________________________________\n","conv2d_64 (Conv2D)           (None, 14, 14, 521)       2443490   \n","_________________________________________________________________\n","conv2d_65 (Conv2D)           (None, 14, 14, 521)       2443490   \n","_________________________________________________________________\n","max_pooling2d_20 (MaxPooling (None, 7, 7, 521)         0         \n","_________________________________________________________________\n","flatten_4 (Flatten)          (None, 25529)             0         \n","_________________________________________________________________\n","dense_11 (Dense)             (None, 4096)              104570880 \n","_________________________________________________________________\n","dense_12 (Dense)             (None, 4096)              16781312  \n","_________________________________________________________________\n","dense_13 (Dense)             (None, 1000)              4097000   \n","=================================================================\n","Total params: 146,080,095\n","Trainable params: 146,080,095\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"G7iqHL09XO_c"},"source":["##Using VGG16 model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":307},"id":"Z0TfYyurYCxL","executionInfo":{"status":"ok","timestamp":1621978559068,"user_tz":-420,"elapsed":29562,"user":{"displayName":"Dũng Nguyễn","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gii5U-zs-8ujhQaCpvDo03iequwy5RSKEnhRnwQGQ=s64","userId":"11702303910424597473"}},"outputId":"242b3748-e3f8-4c0c-d4c2-e47e46da0066"},"source":["from google.colab import drive\n","import os\n","\n","drive.mount(\"/content/drive\")\n","path = '/content/drive/MyDrive/Colab Notebooks/Data'\n","os.chdir(path)\n","os.listdir()\n","\n","import pandas as pd\n","import glob2\n","import matplotlib.pyplot as plt\n","\n","dogs = glob2.glob('Train_Data/dog/*.jpg')\n","dog_labels = ['dog']*len(dogs)\n","cats = glob2.glob('Train_Data/cat/*.jpg')\n","cat_labels = ['cat']*len(cats)\n","\n","labels = dog_labels + cat_labels\n","image_links = dogs + cats\n","\n","data = pd.DataFrame({'labels': labels, 'image_links':image_links})\n","\n","data.groupby(labels).image_links.count().plot.bar()\n","plt.title('Number of images in each class')\n","plt.show()\n"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"a5dWXEGawtFT"},"source":["Test thử Model VGG16"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4bXCgfgAXWNc","executionInfo":{"status":"ok","timestamp":1621978910280,"user_tz":-420,"elapsed":3397,"user":{"displayName":"Dũng Nguyễn","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gii5U-zs-8ujhQaCpvDo03iequwy5RSKEnhRnwQGQ=s64","userId":"11702303910424597473"}},"outputId":"a844697d-4a8c-49b4-c08f-efb8b0c3e5da"},"source":["from keras.preprocessing.image import load_img\n","from keras.preprocessing.image import img_to_array\n","from keras.applications.vgg16 import preprocess_input\n","from keras.applications.vgg16 import decode_predictions\n","from keras.applications.vgg16 import VGG16\n","# load the model\n","model = VGG16()\n","# load an image from file\n","image = load_img(dogs[2], target_size=(224, 224))\n","# convert the image pixels to a numpy array\n","image = img_to_array(image)\n","# reshape data for the model\n","image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))\n","# prepare the image for the VGG model\n","image = preprocess_input(image)\n","# predict the probability across all output classes\n","yhat = model.predict(image)\n","# convert the probabilities to class labels\n","label = decode_predictions(yhat)\n","# retrieve the most likely result, e.g. highest probability\n","label = label[0][0]\n","# print the classification\n","print('%s (%.2f%%)' % (label[1], label[2]*100))\n","model.summary()\n"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Chesapeake_Bay_retriever (90.68%)\n","Model: \"vgg16\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_4 (InputLayer)         [(None, 224, 224, 3)]     0         \n","_________________________________________________________________\n","block1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n","_________________________________________________________________\n","block1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n","_________________________________________________________________\n","block1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n","_________________________________________________________________\n","block2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n","_________________________________________________________________\n","block2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n","_________________________________________________________________\n","block2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n","_________________________________________________________________\n","block3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n","_________________________________________________________________\n","block3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n","_________________________________________________________________\n","block4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n","_________________________________________________________________\n","block4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n","_________________________________________________________________\n","block5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 25088)             0         \n","_________________________________________________________________\n","fc1 (Dense)                  (None, 4096)              102764544 \n","_________________________________________________________________\n","fc2 (Dense)                  (None, 4096)              16781312  \n","_________________________________________________________________\n","predictions (Dense)          (None, 1000)              4097000   \n","=================================================================\n","Total params: 138,357,544\n","Trainable params: 138,357,544\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8usULuG7en3a"},"source":["Áp dụng Fineturn learning vào VGG16"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gc7sYLlzesmf","executionInfo":{"status":"ok","timestamp":1621985049276,"user_tz":-420,"elapsed":911,"user":{"displayName":"Dũng Nguyễn","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gii5U-zs-8ujhQaCpvDo03iequwy5RSKEnhRnwQGQ=s64","userId":"11702303910424597473"}},"outputId":"4261ced6-51d5-49c3-aa57-c17ae5f5bc14"},"source":["from keras.preprocessing import image\n","from keras.applications.vgg16 import VGG16\n","from keras.models import Model\n","from keras.layers import Dense, Dropout, Activation, Flatten\n","from keras.layers import Conv2D, MaxPooling2D\n","from tensorflow.keras.optimizers import SGD\n","\n","base_model = VGG16(weights='imagenet',input_shape=(224,224,3), include_top=False)\n","# # loop over all layers in the base model and freeze them so they will\n","# # *not* be updated during the first training process\n","for layer in base_model.layers:\n","\tlayer.trainable = False\n","\n","x = base_model.output\n","x = Flatten()(x)\n","x = Dense(512, activation='relu')(x)\n","x = Dropout(0.5)(x)\n","x = Dense(512, activation='relu')(x)\n","x = Dropout(0.5)(x)\n","\n","predictions = Dense(2, activation='softmax')(x)\n","\n","# this is the model we will train\n","FTmodel = Model(inputs=base_model.input, outputs=predictions)\n","\n","FTmodel.compile(loss=\"categorical_crossentropy\", optimizer='adam',\n","\tmetrics=[\"accuracy\"])\n","\n","FTmodel.summary()\n"],"execution_count":97,"outputs":[{"output_type":"stream","text":["Model: \"model_37\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_53 (InputLayer)        [(None, 224, 224, 3)]     0         \n","_________________________________________________________________\n","block1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n","_________________________________________________________________\n","block1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n","_________________________________________________________________\n","block1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n","_________________________________________________________________\n","block2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n","_________________________________________________________________\n","block2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n","_________________________________________________________________\n","block2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n","_________________________________________________________________\n","block3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n","_________________________________________________________________\n","block3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n","_________________________________________________________________\n","block3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n","_________________________________________________________________\n","block4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n","_________________________________________________________________\n","block4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n","_________________________________________________________________\n","block4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n","_________________________________________________________________\n","block5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n","_________________________________________________________________\n","block5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n","_________________________________________________________________\n","flatten_40 (Flatten)         (None, 25088)             0         \n","_________________________________________________________________\n","dense_128 (Dense)            (None, 512)               12845568  \n","_________________________________________________________________\n","dropout_34 (Dropout)         (None, 512)               0         \n","_________________________________________________________________\n","dense_129 (Dense)            (None, 512)               262656    \n","_________________________________________________________________\n","dropout_35 (Dropout)         (None, 512)               0         \n","_________________________________________________________________\n","dense_130 (Dense)            (None, 2)                 1026      \n","=================================================================\n","Total params: 27,823,938\n","Trainable params: 13,109,250\n","Non-trainable params: 14,714,688\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zbQ76CzigA2Q","executionInfo":{"status":"ok","timestamp":1621984123549,"user_tz":-420,"elapsed":586380,"user":{"displayName":"Dũng Nguyễn","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gii5U-zs-8ujhQaCpvDo03iequwy5RSKEnhRnwQGQ=s64","userId":"11702303910424597473"}},"outputId":"5ba4d41d-311e-417b-9dd7-19c9c2582487"},"source":["from sklearn.preprocessing import LabelBinarizer\n","Y = LabelBinarizer().fit_transform(data.labels)\n","\n","X=[]\n","for link in data.image_links:\n","  # load an image from file\n","  image = load_img(link, target_size=(224, 224))\n","  # convert the image pixels to a numpy array\n","  image = img_to_array(image)\n","  # reshape data for the model\n","  image = image.reshape((image.shape[0], image.shape[1], image.shape[2]))\n","  # prepare the image for the VGG model\n","  image = preprocess_input(image)\n","  X.append(image)\n","\n","X=np.asarray(X)\n","print(X.shape)\n"],"execution_count":81,"outputs":[{"output_type":"stream","text":["(1399, 224, 224, 3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pMICE8hqsLeP","executionInfo":{"status":"ok","timestamp":1621986583134,"user_tz":-420,"elapsed":1529769,"user":{"displayName":"Dũng Nguyễn","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gii5U-zs-8ujhQaCpvDo03iequwy5RSKEnhRnwQGQ=s64","userId":"11702303910424597473"}},"outputId":"3054766c-b796-4a58-d55f-c8a781d90aff"},"source":["from keras.utils.np_utils import to_categorical\n","train_labels = to_categorical(Y)\n","\n","FTmodel.fit(X,train_labels,epochs=3)"],"execution_count":98,"outputs":[{"output_type":"stream","text":["Epoch 1/3\n","44/44 [==============================] - 511s 12s/step - loss: 15.0727 - accuracy: 0.8033\n","Epoch 2/3\n","44/44 [==============================] - 509s 12s/step - loss: 2.7852 - accuracy: 0.9696\n","Epoch 3/3\n","44/44 [==============================] - 510s 12s/step - loss: 1.9843 - accuracy: 0.9847\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fb83d2e7c50>"]},"metadata":{"tags":[]},"execution_count":98}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oYIaBfko8w3C","executionInfo":{"status":"ok","timestamp":1621988473680,"user_tz":-420,"elapsed":1582392,"user":{"displayName":"Dũng Nguyễn","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gii5U-zs-8ujhQaCpvDo03iequwy5RSKEnhRnwQGQ=s64","userId":"11702303910424597473"}},"outputId":"6bd3b6c7-a6d7-429e-95f2-cb820a784f6a"},"source":["for layer in FTmodel.layers:\n","\tlayer.trainable = True\n","\n","FTmodel.fit(X,train_labels,epochs=3)\n"],"execution_count":99,"outputs":[{"output_type":"stream","text":["Epoch 1/3\n","44/44 [==============================] - 508s 12s/step - loss: 2.1406 - accuracy: 0.9778\n","Epoch 2/3\n","44/44 [==============================] - 508s 12s/step - loss: 0.9254 - accuracy: 0.9871\n","Epoch 3/3\n","44/44 [==============================] - 508s 12s/step - loss: 0.6939 - accuracy: 0.9914\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fb83b0d5b90>"]},"metadata":{"tags":[]},"execution_count":99}]},{"cell_type":"code","metadata":{"id":"aA2djO9489Py"},"source":[""],"execution_count":null,"outputs":[]}]}